{"version":3,"sources":["Component/Titles/Titles.module.scss","Component/Form/Form.module.scss","Component/Titles/Titles.jsx","Container/App/App.jsx","Component/Form/Form.jsx","Component/Weather/Weather.jsx","serviceWorker.js","index.js","Container/App/App.module.scss"],"names":["module","exports","Component","App","state","temperature","undefined","city","country","humidity","description","error","getWeather","e","a","preventDefault","target","elements","value","fetch","apiCall","json","convertDataToJson","console","log","setState","main","temp","name","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,MAAQ,wB,mBCA1BD,EAAOC,QAAU,CAAC,aAAe,6B,uPCCZC,Y,gBCyENC,GCxEID,Y,MCDGA,Y,wNFOpBE,MAAQ,CACNC,iBAAaC,EACbC,UAAMD,EACNE,aAASF,EACTG,cAAUH,EACVI,iBAAaJ,EACbK,WAAOL,G,EAETM,W,uCAAa,WAAOC,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIR,EAAOM,EAAEG,OAAOC,SAASV,KAAKW,MAC9BV,EAAUK,EAAEG,OAAOC,SAAST,QAAQU,MAH/B,SAIWC,MAAM,oDAAD,OAAqDZ,EAArD,YAA6DC,EAA7D,yDAJhB,cAILY,EAJK,gBAKqBA,EAAQC,OAL7B,OAKLC,EALK,OAMXC,QAAQC,IAAIF,GACRf,GAAQC,EACV,EAAKiB,SAAS,CACZpB,YAAaiB,EAAkBI,KAAKC,KACpCpB,KAAMe,EAAkBM,KACxBpB,QAASc,EAAkBO,IAAIrB,QAC/BC,SAAUa,EAAkBI,KAAKjB,SACjCC,YAAaY,EAAkBQ,QAAQ,GAAGpB,YAC1CC,MAAO,KAGP,EAAKc,SAAS,CACZpB,iBAAaC,EACbC,UAAMD,EACNE,aAASF,EACTG,cAAUH,EACVI,iBAAaJ,EACbK,MAAO,+BAvBF,4C,qHATGT,cGIE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLY,QAAQZ,MAAMA,EAAMqC,a,kBExI5BhD,EAAOC,QAAU,CAAC,QAAU,qBAAqB,KAAO,kBAAkB,kBAAkB,6BAA6B,yBAAyB,oCAAoC,4BAA4B,uCAAuC,iBAAiB,4BAA4B,cAAgB,2BAA2B,aAAe,0BAA0B,eAAiB,4BAA4B,eAAiB,+B","file":"static/js/main.2f9195f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Titles_title__KdmVQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"positionForm\":\"Form_positionForm__1SkgB\"};","import React, { Component } from \"react\";\r\nimport styles from \"./Titles.module.scss\";\r\nclass Titles extends Component {\r\n    render() {\r\n        return(\r\n            <div className = {styles.title}>\r\n                <h2>Weather Finder</h2>\r\n                <p> Find out tempearture conditions and more</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Titles;","import React, { Component } from \"react\";\nimport styles from \"./App.module.scss\";\nimport Titles from \"../../Component/Titles\"\nimport Form from \"../../Component/Form/Form\";\nimport Weather from \"../../Component/Weather\";\nimport { async } from \"q\";\nimport { throws } from \"assert\";\nconst Api_key = \"ff5dd56508e67c163c95b7ed93bbc5dcb\"\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=f5dd56508e67c163c95b7ed93bbc5dcb`)\n    const convertDataToJson = await apiCall.json();\n    console.log(convertDataToJson);\n    if (city && country) {\n      this.setState({\n        temperature: convertDataToJson.main.temp,\n        city: convertDataToJson.name,\n        country: convertDataToJson.sys.country,\n        humidity: convertDataToJson.main.humidity,\n        description: convertDataToJson.weather[0].description,\n        error: \"\"\n      })\n    }else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"please complete the fields\"\n        })\n      }\n    }\n  render() {\n    return (\n      // <div className = {styles.wrapper}>\n\n  <div className = {styles.wrapper}>\n    <div className = {styles.main}>\n      <div className = {styles.container}>\n        <div className = {styles.row}>\n          <div className=\"col-xs-5 title-container\"></div>\n          <Titles  />\n          </div>\n          <div className =\"col-xs-7-form-container\"></div>\n          <Form getWeather={this.getWeather} />\n        <div className = {styles.insideWrapper}>\n        \n        \n        <Weather\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidtity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n        />\n        </div>\n        </div>\n      </div>\n      </div>\n    )\n  }\n}\nexport default App;","import React, { Component } from \"react\";\r\nimport styles from \"./Form.module.scss\";\r\n\r\nclass Form extends Component {\r\n    render() {\r\n        return(\r\n            <div className = {styles.positionForm}>\r\n            <form onSubmit = {this.props.getWeather}>\r\n                <input type = \"text\" name = \"city\" placeholder = \"city...\"/>\r\n                <input type = \"text\" name = \"country\" placeholder = \"country...\"/> <br></br>\r\n                <button>Get Weather</button>\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Form;","import React, { Component } from \"react\";\r\nimport styles from \"./Weather.module.scss\";\r\nclass Weather extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.props.city && this.props.country &&<p>Location: {this.props.city} , {this.props.country}</p>}\r\n               {this.props.temperature && <p>Temperature: {this.props.temperature}</p>}\r\n               {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n              {this.props.description && <p>Condition: {this.props.description} </p>}\r\n                {this.props.error && <p>{this.props.error}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Weather;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from '../src/Container/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__cpnwA\",\"main\":\"App_main__2zxjj\",\"title-container\":\"App_title-container__15Tah\",\"title-container__title\":\"App_title-container__title__38p1x\",\"title-container__subtitle\":\"App_title-container__subtitle__39Waa\",\"form-container\":\"App_form-container__-o82Z\",\"weather__info\":\"App_weather__info__3OzWK\",\"weather__key\":\"App_weather__key__DiGLY\",\"weather__value\":\"App_weather__value__Pb9VK\",\"weather__error\":\"App_weather__error__1818k\"};"],"sourceRoot":""}